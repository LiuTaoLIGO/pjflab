#SNR for table top

#%matplotlib inline
#imports needed for plotting and animation
import matplotlib.pyplot as plt
import autograd.numpy as np
#import hpc do not need with this code
#import pykat as pk nor do we need this
import skimage
import scipy
from scipy import fft
from scipy import ndimage

from mpl_toolkits.mplot3d import Axes3D
from matplotlib.colors import LogNorm
from matplotlib import animation
from IPython.display import HTML


from autograd import elementwise_grad, value_and_grad
from scipy.optimize import minimize
from collections import defaultdict
from itertools import zip_longest
from functools import partial

from IPython.display import HTML

import os
import PySpin

import argparse

parser = argparse.ArgumentParser(description="Initialize HPC settings")

parser.add_argument('-exp', help='The exposure time of the camera in micro seconds. Bounds: 5 - 25000.',
                    type = float, default=4000)
parser.add_argument('-gain', help='The gain of the camera in dB. Bounds: 0 - 47.',
                    type = float, default = 0)
parser.add_argument('-NI', help='The number of images to be collected by the camera.',
                    type = int, default = 400)

args = parser.parse_args()

exp = args.exp
gain = args.gain
NUM_IMAGES = args.NI


def PullPixelData(rowi, coli, n_beatnote):
    #pulls out value at pixel [rowi][coli] of image i
    pixel_data = [i[rowi][coli] for i in n_beatnote]
    return pixel_data

def SNR(t,pixel_data):
    N = len(t)
    fs = 40
    ft = 2*scipy.fft.fft(pixel_data)/N
    h = ft[0:N//2]
    signal = np.abs(h[100])
    #print(signal)
    noise = np.sum(np.abs(h[1:99])) + np.sum(np.abs(h[101:200]))
    #print(noise)
    SNR = signal/noise

    return SNR

#this will take the place of f in the toy model
def AvgSNR2(images): #change to just the recorded images
    #finding the bright spot on the images
    #print("called SNR")
    cords = ndimage.measurements.center_of_mass(images[0])
    x = int(cords[1])
    y = int(cords[0])
    x_array=np.linspace(x-4,x+5,10)
    y_array=np.linspace(y-4,y+5,10)
    """
    neg_Avg_SNR2: return negative value of the squared avg SNR amongst the calculated pixels
    x_array: numpy array generated from defining sensor
    y_array: numpy array generated from defining sensor
    beam1_amp: numpy array generated by specifying beam power
    beam2_curved_amp: numpy array generated by specifying curvature and beam power
    """
    SNRs = []
    t = np.linspace(0.025,10,400)
    #Change this, we dont need to make any pixels
    for i in range(len(x_array)): #still want to be on the center of the camera (what if beams arent aligned??)
        for j in range(len(y_array)):
            pixel_data = PullPixelData(rowi=int(y_array[i]), coli=int(x_array[j]), n_beatnote=images)
            SNRi = SNR(t=t, pixel_data=pixel_data)
            SNRs.append(SNRi)
    neg_Avg_SNR2 = -1*(sum(SNRs)/len(SNRs))**2
    #print("This is the value of SNR" , neg_Avg_SNR2)
    #so as to ensure saturated (-<SNR>^2) do not dominate the results....just set equal to 0
    #just be careful with the camera
    SatBool = 0
    for i in range(4):
        if np.max(images[i]) > 65510: #this value for 12 bit
            SatBool = 1
    if SatBool == 1:
        neg_Avg_SNR2 = 0

    return neg_Avg_SNR2

class TriggerType:
    HARDWARE = 2

CHOSEN_TRIGGER = TriggerType.HARDWARE
# Camera Code... need to set parameters of camera and record images
def camera_code(exp, gain,NUM_IMAGES):
#set variables and send out images (can I return the images before the method ends?)
#number of images, what else?? some sort of time array(could just make up based on capture frequency)
    images=[]
    snr = 0

    def configure_exp_gain(cam,exp,gain):
        try:
            result = True
            nodemap = cam.GetNodeMap()


        #exposure (need to reset?)
            if cam.ExposureAuto.GetAccessMode() != PySpin.RW:
                print('Unable to disable automatic exposure. Aborting...')
                return False

            cam.ExposureAuto.SetValue(PySpin.ExposureAuto_Off)
            #print('Automatic exposure disabled...')

            if cam.ExposureTime.GetAccessMode() != PySpin.RW:
                print('Unable to set exposure time. Aborting...')
                return False

            exposure_time_to_set = exp #measured in us
            exposure_time_to_set = min(cam.ExposureTime.GetMax(), exposure_time_to_set)
            cam.ExposureTime.SetValue(exposure_time_to_set)
            print('Shutter time set to %s us...\n' % exposure_time_to_set)


            #gain
            if cam.GainAuto.GetAccessMode() != PySpin.RW:
                print('Unable to disable automatic Gain. Aborting...')
                return False

            cam.GainAuto.SetValue(PySpin.GainAuto_Off)

            if cam.Gain.GetAccessMode() != PySpin.RW:
                print('Unable to set gain. Aborting...')
                return False

            gain_to_set = gain #measured in dB
            gain_to_set = min(cam.Gain.GetMax(), gain_to_set)
            cam.Gain.SetValue(gain_to_set)
            print('Gain set to %s dB...\n' % gain_to_set)


            #setting the pixel format
            node_pixel_format = PySpin.CEnumerationPtr(nodemap.GetNode('PixelFormat'))
            if PySpin.IsAvailable(node_pixel_format) and PySpin.IsWritable(node_pixel_format):

                # Retrieve the desired entry node from the enumeration node
                node_pixel_format_mono8 = PySpin.CEnumEntryPtr(node_pixel_format.GetEntryByName('Mono12p'))
                if PySpin.IsAvailable(node_pixel_format_mono8) and PySpin.IsReadable(node_pixel_format_mono8):

                    # Retrieve the integer value from the entry node
                    pixel_format_mono8 = node_pixel_format_mono8.GetValue()

                    # Set integer as new value for enumeration node
                    node_pixel_format.SetIntValue(pixel_format_mono8)

                    print('Pixel format set to %s...' % node_pixel_format.GetCurrentEntry().GetSymbolic())

                    #check bits per pixel
                    ##if PySpin.IsAvailable(node_pixel_size) and PySpin.IsReadable(node_pixel_size):
                        #print(node_pixel_size)

                else:
                    print('Pixel format mono 12 not available...')

            else:
                print('Pixel format not available...')


            #set ADC to 12 bit
            node_ADC = PySpin.CEnumerationPtr(nodemap.GetNode('AdcBitDepth'))
            if not PySpin.IsAvailable(node_ADC) or not PySpin.IsWritable(node_ADC):
                print('Unable to get ADC (node retrieval). Aborting...')
                return False

            node_ADC_setting = node_ADC.GetEntryByName('Bit12')
            if not PySpin.IsAvailable(node_ADC_setting) or not PySpin.IsReadable(
                    node_ADC_setting):
                print('Unable to set ADC (enum entry retrieval). Aborting...')
                return False
            node_ADC.SetIntValue(node_ADC_setting.GetValue())

        except PySpin.SpinnakerException as ex:
            print('Error: %s' % ex)
            result = False

        return result



    def configure_trigger(cam):
        """
        This function configures the camera to use a trigger. First, trigger mode is
        set to off in order to select the trigger source. Once the trigger source
        has been selected, trigger mode is then enabled, which has the camera
        capture only a single image upon the execution of the chosen trigger.

         :param cam: Camera to configure trigger for.
         :type cam: CameraPtr
         :return: True if successful, False otherwise.
         :rtype: bool
        """
        result = True

        #print('*** CONFIGURING TRIGGER ***\n')



        try:
            # Ensure trigger mode off
            # The trigger must be disabled in order to configure whether the source
            # is software or hardware.
            nodemap = cam.GetNodeMap()
            node_trigger_mode = PySpin.CEnumerationPtr(nodemap.GetNode('TriggerMode'))
            if not PySpin.IsAvailable(node_trigger_mode) or not PySpin.IsReadable(node_trigger_mode):
                print('Unable to disable trigger mode (node retrieval). Aborting...')
                return False

            node_trigger_mode_off = node_trigger_mode.GetEntryByName('Off')
            if not PySpin.IsAvailable(node_trigger_mode_off) or not PySpin.IsReadable(node_trigger_mode_off):
                print('Unable to disable trigger mode (enum entry retrieval). Aborting...')
                return False

            node_trigger_mode.SetIntValue(node_trigger_mode_off.GetValue())

            #print('Trigger mode disabled...')

            # Select trigger source
            # The trigger source must be set to hardware or software while trigger
            # mode is off.
            node_trigger_source = PySpin.CEnumerationPtr(nodemap.GetNode('TriggerSource'))
            if not PySpin.IsAvailable(node_trigger_source) or not PySpin.IsWritable(node_trigger_source):
                print('Unable to get trigger source (node retrieval). Aborting...')
                return False

            if CHOSEN_TRIGGER == TriggerType.HARDWARE:
                node_trigger_source_hardware = node_trigger_source.GetEntryByName('Line3') #40Hz from CG
                if not PySpin.IsAvailable(node_trigger_source_hardware) or not PySpin.IsReadable(
                        node_trigger_source_hardware):
                    print('Unable to set trigger source (enum entry retrieval). Aborting...')
                    return False
                node_trigger_source.SetIntValue(node_trigger_source_hardware.GetValue())

            # Turn trigger mode on
            # Once the appropriate trigger source has been set, turn trigger mode
            # on in order to retrieve images using the trigger.
            node_trigger_mode_on = node_trigger_mode.GetEntryByName('On')
            if not PySpin.IsAvailable(node_trigger_mode_on) or not PySpin.IsReadable(node_trigger_mode_on):
                print('Unable to enable trigger mode (enum entry retrieval). Aborting...')
                return False

            node_trigger_mode.SetIntValue(node_trigger_mode_on.GetValue())
            #print('Trigger mode turned back on...')


        except PySpin.SpinnakerException as ex:
            print('Error: %s' % ex)
            return False

        return result



    def grab_next_image_by_trigger(nodemap, cam):  # not sure what this does, but its working so it will be left
        """
            This function acquires an image by executing the trigger node.

            :param cam: Camera to acquire images from.
            :param nodemap: Device nodemap.
            :type cam: CameraPtr
            :type nodemap: INodeMap
            :return: True if successful, False otherwise.
            :rtype: bool
        """

        try:
            result = True
                # Use trigger to capture image
                # The software trigger only feigns being executed by the Enter key;
                # what might not be immediately apparent is that there is not a
                # continuous stream of images being captured; in other examples that
                # acquire images, the camera captures a continuous stream of images.
                # When an image is retrieved, it is plucked from the stream.


            if CHOSEN_TRIGGER == TriggerType.HARDWARE:
                     # don't need to see this every image
                    ## print('Use the hardware to trigger image acquisition.')
                a = 2

        except PySpin.SpinnakerException as ex:
            print('Error: %s' % ex)
            return False

        return result


    def acquire_images(cam, nodemap, nodemap_tldevice):
        """
            This function acquires and saves 10 images from a device.
            Please see Acquisition example for more in-depth comments on acquiring images.

            :param cam: Camera to acquire images from.
            :param nodemap: Device nodemap.
            :param nodemap_tldevice: Transport layer device nodemap.
            :type cam: CameraPtr
            :type nodemap: INodeMap
            :type nodemap_tldevice: INodeMap
            :return: True if successful, False otherwise.
            :rtype: bool
        """

        #print('*** IMAGE ACQUISITION ***\n')
        try:
            result = True

            # Set acquisition mode to continuous
            # In order to access the node entries, they have to be casted to a pointer type (CEnumerationPtr here)
            node_acquisition_mode = PySpin.CEnumerationPtr(nodemap.GetNode('AcquisitionMode'))
            if not PySpin.IsAvailable(node_acquisition_mode) or not PySpin.IsWritable(node_acquisition_mode):
                print('Unable to set acquisition mode to continuous (enum retrieval). Aborting...')
                return False

            # Retrieve entry node from enumeration node
            node_acquisition_mode_continuous = node_acquisition_mode.GetEntryByName('Continuous')
            if not PySpin.IsAvailable(node_acquisition_mode_continuous) or not PySpin.IsReadable(
                    node_acquisition_mode_continuous):
                print('Unable to set acquisition mode to continuous (entry retrieval). Aborting...')
                return False

            # Retrieve integer value from entry node
            acquisition_mode_continuous = node_acquisition_mode_continuous.GetValue()

            # Set integer value from entry node as new value of enumeration node
            node_acquisition_mode.SetIntValue(acquisition_mode_continuous)

            #print('Acquisition mode set to continuous...')

            #  Begin acquiring images
            cam.BeginAcquisition()

            #print('Acquiring images...')


            #  Retrieve device serial number for filename
            #
            #  *** NOTES ***
            #  The device serial number is retrieved in order to keep cameras from
            #  overwriting one another. Grabbing image IDs could also accomplish
            #  this.
            device_serial_number = ''
            node_device_serial_number = PySpin.CStringPtr(nodemap_tldevice.GetNode('DeviceSerialNumber'))
            if PySpin.IsAvailable(node_device_serial_number) and PySpin.IsReadable(node_device_serial_number):
                device_serial_number = node_device_serial_number.GetValue()
                #print('Device serial number retrieved as %s...' % device_serial_number)


            print('')
            #picList = []

            # Retrieve, convert, and save images
            for i in range(NUM_IMAGES):
                try:

                    #  Retrieve the next image from the trigger
                    result &= grab_next_image_by_trigger(nodemap, cam)

                    #  Retrieve next received image
                    image_result = cam.GetNextImage()

                    #  Ensure image completion
                    if image_result.IsIncomplete():
                        print('Image incomplete with image status %d ...' % image_result.GetImageStatus())

                    else:

                        #  Print image information; height and width recorded in pixels
                        #
                        #  *** NOTES ***
                        #  Images have quite a bit of available metadata including
                        #  things such as CRC, image status, and offset values, to
                        #  name a few.
                        #
                        #Don't need this right now (CP)
                        ##width = image_result.GetWidth()
                        ##height = image_result.GetHeight()
                        ##print('Grabbed Image %d, width = %d, height = %d' % (i, width, height))

                        #  Convert image to mono 8
                        #
                        #  *** NOTES ***
                        #  Images can be converted between pixel formats by using
                        #  the appropriate enumeration value. Unlike the original
                        #  image, the converted one does not need to be released as
                        #  it does not affect the camera buffer.
                        #
                        #  When converting images, color processing algorithm is an
                        #  optional parameter.

                        #change to 12 bit
                        #(self,format,algorithm)
                        #Image_Result = image_result.ResetImage(720,540,0,0,PySpin.PixelFormat_Mono12p)
                        #print(image_result.GetPixelFormatName())
                        image_converted = image_result.Convert(PySpin.PixelFormat_Mono16, PySpin.HQ_LINEAR)

                        image_result.Release()

                        #add to piclist
                        imgarray = image_converted.GetNDArray()
                        images.append(imgarray)

                except PySpin.SpinnakerException as ex:
                    print('Error: %s' % ex)
                    return False


            # End acquisition
            #
            #  *** NOTES ***
            #  Ending acquisition appropriately helps ensure that devices clean up
            #  properly and do not need to be power-cycled to maintain integrity.
            cam.EndAcquisition()
            snr = AvgSNR2(images) #try with picList
            #print("this is SNR in acquire images",SNR) #this is not the value being returne

        except PySpin.SpinnakerException as ex:
            print('Error: %s' % ex)
            return False

        return snr


    def reset_trigger(nodemap):
        """
        This function returns the camera to a normal state by turning off trigger mode.

        :param nodemap: Transport layer device nodemap.
        :type nodemap: INodeMap
        :returns: True if successful, False otherwise.
        :rtype: bool
        """
        try:
            result = True
            node_trigger_mode = PySpin.CEnumerationPtr(nodemap.GetNode('TriggerMode'))
            if not PySpin.IsAvailable(node_trigger_mode) or not PySpin.IsReadable(node_trigger_mode):
                print('Unable to disable trigger mode (node retrieval). Aborting...')
                return False

            node_trigger_mode_off = node_trigger_mode.GetEntryByName('Off')
            if not PySpin.IsAvailable(node_trigger_mode_off) or not PySpin.IsReadable(node_trigger_mode_off):
                print('Unable to disable trigger mode (enum entry retrieval). Aborting...')
                return False

            node_trigger_mode.SetIntValue(node_trigger_mode_off.GetValue())

            #print('Trigger mode disabled...')

        except PySpin.SpinnakerException as ex:
            print('Error: %s' % ex)
            result = False

        return result


    def print_device_info(nodemap):
        """
        This function prints the device information of the camera from the transport
        layer; please see NodeMapInfo example for more in-depth comments on printing
        device information from the nodemap.

        :param nodemap: Transport layer device nodemap.
        :type nodemap: INodeMap
        :returns: True if successful, False otherwise.
        :rtype: bool
        """

        #print('*** DEVICE INFORMATION ***\n')

        try:
            result = True
            node_device_information = PySpin.CCategoryPtr(nodemap.GetNode('DeviceInformation'))

            if PySpin.IsAvailable(node_device_information) and PySpin.IsReadable(node_device_information):
                features = node_device_information.GetFeatures()
                #for feature in features:
                    #node_feature = PySpin.CValuePtr(feature)
                    #print('%s: %s' % (node_feature.GetName(),
                                      #node_feature.ToString() if PySpin.IsReadable(node_feature) else 'Node not readable'))

            else:
                print('Device control information not available.')

        except PySpin.SpinnakerException as ex:
            print('Error: %s' % ex)
            return False

        return result


    def run_single_camera(cam):
        """
        This function acts as the body of the example; please see NodeMapInfo example
        for more in-depth comments on setting up cameras.

        :param cam: Camera to run on.
        :type cam: CameraPtr
        :return: True if successful, False otherwise.
        :rtype: bool
        """
        try:
            result = True
            err = False

            # Retrieve TL device nodemap and print device information
            nodemap_tldevice = cam.GetTLDeviceNodeMap()

            #result &= print_device_info(nodemap_tldevice)
            #dont need to print all of that

            # Initialize camera
            cam.Init()

            # Retrieve GenICam nodemap
            nodemap = cam.GetNodeMap()

            #configure settings
            if configure_exp_gain(cam,exp,gain) is False:
                return False

            # Configure trigger
            if configure_trigger(cam) is False:
                return False

            # Acquire images
            snr = acquire_images(cam, nodemap, nodemap_tldevice)
            #print("SNR after acquire_images: ", snr)

            # Reset trigger
            result &= reset_trigger(nodemap)

            # Deinitialize camera
            cam.DeInit()

        except PySpin.SpinnakerException as ex:
            print('Error: %s' % ex)
            result = False

        return snr


    def main():
        """
        Example entry point; please see Enumeration example for more in-depth
        comments on preparing and cleaning up the system.

        :return: True if successful, False otherwise.
        :rtype: bool
        """

        # Since this application saves images in the current folder
        # we must ensure that we have permission to write to this folder.
        # If we do not have permission, fail right away.
        try:
            test_file = open('test.txt', 'w+')
        except IOError:
            print('Unable to write to current directory. Please check permissions.')
            input('Press Enter to exit...')
            return False

        test_file.close()
        os.remove(test_file.name)

        result = True

        # Retrieve singleton reference to system object
        system = PySpin.System.GetInstance()

        # Get current library version
        version = system.GetLibraryVersion()
        #print('Library version: %d.%d.%d.%d' % (version.major, version.minor, version.type, version.build))

        # Retrieve list of cameras from the system
        cam_list = system.GetCameras()

        num_cameras = cam_list.GetSize()

        #print('Number of cameras detected: %d' % num_cameras)

        # Finish if there are no cameras
        if num_cameras == 0:
            # Clear camera list before releasing system
            cam_list.Clear()

            # Release system instance
            system.ReleaseInstance()

            print('Not enough cameras!')
            input('Done! Press Enter to exit...')
            return False

        # Run example on each camera
        for i, cam in enumerate(cam_list):

            #print('Running example for camera %d...' % i)

            snr = run_single_camera(cam)
            #print("SNR after run_single_cam: ", snr)
            #print('Camera %d example complete... \n' % i)

        # Release reference to camera
        # NOTE: Unlike the C++ examples, we cannot rely on pointer objects being automatically
        # cleaned up when going out of scope.
        # The usage of del is preferred to assigning the variable to None.
        del cam

        # Clear camera list before releasing system
        cam_list.Clear()

        # Release system instance
        system.ReleaseInstance()

        #input('Done! Press Enter to exit...')
        #print("SNR before last nested method: ", snr)
        return snr


    #if __name__ == '__main__':
        #main()

    snr = main()
    #SNR = AvgSNR2(images) #is this running?
    #print("SNR before end of method: ", snr)
    return snr

SNR_value = camera_code(exp, gain,NUM_IMAGES)
print('The SNR is: ',SNR_value,'\nwith exposure:',exp,'us','gain:',gain,'dB and',NUM_IMAGES,'Images.')
